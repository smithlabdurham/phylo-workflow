# Configure settings and read input
inputFile = "data.nex"

minEss = 333 # Estimated sample size at which to allow analysis to terminate
maxPSRF = 1.01 # Scale Reduction Factor at which to assume convergence

chars <- readDiscreteCharacterData(inputFile)
logFile = inputFile + ".mkv.log"
paramFile = inputFile + ".mkv.p.log"
treeFile = inputFile + ".mkv.trees"
ckpFile = inputFile + ".mkv.ckp"

# Set seed, for reproducibility
seed(0)

# Define analysis
# Modelled on https://revbayes.github.io/tutorials/morph_tree/V2

# Dataset properties
taxa <- chars.names()
nTaxa <- chars.size()
nEdge <- 2 * nTaxa - 3

moves = VectorMoves()

# Uniform prior on tree topologies
topology ~ dnUniformTopology(taxa)
moves.append( mvNNI(topology, weight = nEdge / 2.0) )
moves.append( mvSPR(topology, weight = nEdge / 8.0) )


# Compound dirichlet prior on edge length variability
# See https://revbayes.github.io/tutorials/ctmc/
# Prior mean tree length should be within a couple of orders of magnitude of the
# true value (Zhang, Rannala & Yang, 2012); we try one change per site
gamma_shape <- 2
exp_steps <- 1 # Expected changes per site across the tree
tree_length ~ dnGamma(shape = gamma_shape, rate = gamma_shape / exp_steps)
moves.append( mvScale(tree_length, weight = 1.0) )

rel_br_lengths ~ dnDirichlet( rep(1.0, nEdge) )
moves.append( mvBetaSimplex(rel_br_lengths, weight = nEdge / 3.0) )
moves.append( mvDirichletSimplex(rel_br_lengths, weight = nEdge / 20.0) )
br_lengths := rel_br_lengths * tree_length

phylogeny := treeAssembly(topology, br_lengths)


# Log-normal distributed rate variation (Wagner 2012, doi: 10.1098/rsbl.2011.0523)
rate_log_sd ~ dnGamma( 1, 1 )
moves.append( mvScale(rate_log_sd, weight = 1.5) )

# Mean = 1, so that tree length ~ character changes
# 6 categories (see Wright & Wynd 2024,
# https://www.biorxiv.org/content/10.1101/2024.06.26.600858v1)
rate_categories := fnDiscretizeDistribution( dnLognormal( 0, rate_log_sd ), 6)

matrixByState[1] <- chars # empty placeholder

# Partition all characters by number of states (k)
maxK = 10
idx = 1
for (k in 2:maxK) {
  matrixByState[k] <- chars
  matrixByState[k].setNumStatesPartition(k)
  # Reduce memory footprint, per https://github.com/revbayes/revbayes/issues/552
  matrixByState[k].removeExcludedCharacters()
  nc = matrixByState[k].nchar()
  
  if (nc > 0) {
    print(nc, " characters in partition ", idx, " (", k, " states).")
    q[idx] <- fnJC(k)
    m_morph[idx] ~ dnPhyloCTMC(
      tree = phylogeny,
      
      siteRates = rate_categories,
      Q = q[idx],
      type = "Standard",
      coding = "variable"
    )
    m_morph[idx].clamp(matrixByState[k])
    idx = idx + 1
  }
}

# Conduct MCMC analysis
mymodel = model(phylogeny)

monitors = VectorMonitors()
monitors.append( mnScreen(printgen = 50, prior = FALSE, posterior = FALSE) )
monitors.append( mnModel(filename = logFile, printgen = 10) )
monitors.append( mnModel(filename = paramFile, printgen = 1, stochasticOnly = TRUE, exclude = ["rel_br_lengths"]) )
monitors.append( mnFile(filename = treeFile, printgen = 1, phylogeny) )

mymc3 = mcmcmc(
  mymodel, monitors, moves,
  nruns = 2,
  nchains = 8,
  tuneHeat = TRUE,
  swapMethod = "both",
  swapMode = "multiple",
  combine = "none"
)
print("   Created MCMCMC object")

checkFreq = 50

if (fileExists(inputFile + "_run_1_chain_0.ckp")) {
  print("   Initializing from checkpoint")
  mymc3.initializeFromCheckpoint(ckpFile)
  # runHours = 24
} else {
  mymc3.burnin(generations = 500, tuningInterval = 250)
  # runHours = 71
}

stopping_rules[1] = srMinESS(minEss, paramFile, checkFreq)
stopping_rules[2] = srGelmanRubin(maxPSRF, paramFile, checkFreq)
# Optionally interrupt the run after a set number of hours, which you may
# set to a higher value on the first run to allow time for a burn-in phase
#
# This can be useful when scheduling runs on a remote service
#
# stopping_rules[3] = srMaxTime(runHours, "hours")

print("   Commencing MCMCMC run at",
      time("year"), time("day"), time("seconds") / 60 / 60)
mymc3.run(rules = stopping_rules, checkpointFile = ckpFile, checkpointInterval = checkFreq, verbose = 2)

print("  # # # RUN TERMINATED # # #  ")
print("Timestamp:", time("year"), time("day"), time("seconds") / 60 / 60)
